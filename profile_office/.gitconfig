[alias]
	# View the SHA, description, and history graph of the latest 20 commits
	l = log --pretty=oneline -n 20 --graph
	# View the current working tree status using the short format
	s = status -s
	# Show the diff between the latest commit and the current state
	d = !"git diff-index --quiet HEAD -- || clear; git diff --patch-with-stat"
	# `git di $number` shows the diff between the state `$number` revisions ago and the current state
	di = !"d() { git diff --patch-with-stat HEAD~$1; }; git diff-index --quiet HEAD -- || clear; d"
	# Pull in remote changes for the current repository and all its submodules
	p = !"git pull; git submodule foreach git pull origin master"
	# Clone a repository including all submodules
	c = clone --recursive
	# Commit all changes
	ca = !git add -A && git commit -av
	# Switch to a branch, creating it if necessary
	go = checkout -B
	# Show verbose output about tags, branches or remotes in order
    t = "!t() { git tag -l | sort -V; }; t"
	branches = branch -a
	remotes = remote -v
	# Credit an author on the latest commit
	credit = "!f() { git commit --amend --author \"$1 <$2>\" -C HEAD; }; f"
	# Interactive rebase with the given number of latest commits
	reb = "!r() { git rebase -i HEAD~$1; }; r"

    ## Git Add/Commit/Push
    acp = !sh -c 'git add -A && git commit -m \"$@\" && git push' -

    ammend = commit --amend
    amend = ammend
    ammed = ammend
    s = status
    co = checkout
    last = cat-file commit HEAD
    br = branch
    filelog = log -u
    fl = log -u
    dlc = diff --cached HEAD^

    assume = update-index --assume-unchanged
    unassume = update-index --no-assume-unchanged
    assumed = "!git ls-files -v | grep ^h | cut -c 3-"

    lasttag = describe --tags --abbrev=0
    lt = describe --tags --abbrev=0

    vim="!vim"
    vi=vim
    pushall = !"for i in `git remote`; do git push $i; done;"
    f = fetch
    ds = diff --staged
    rel = !"git checke master && git relstart $@ && git relfinish && git push --all cx_local && git push --tags cx_local && echo $@"
    push-local = !"git push --all cx_local && git push --tags cx_local"

      # Print out a nice ascii graph of the branches with commit comments, and refs shown.
      graph = log --graph --format=format:'%C(bold blue)%h%C(reset) - %C(bold green)(%ar)%C(reset) %C(white)%s%C(reset) %C(dim white)- %an%C(reset)%C(bold yellow)%d%C(reset)' --all

      # log/diff the commits you are ahead of the remote (Note the @{u} points to the upstream branch HEAD is what you currently have checked out):
      logahead = log --format=format:'%C(bold blue)%h%C(reset) - %C(bold green)(%ar)%C(reset) %C(white)%s%C(reset) %C(dim white)- %an%C(reset)' @{u}..HEAD
      diffahead = diff @{u}..HEAD

      # log/diff the commits you are behind the remote (use git fetch since pull will automatically merge these commits in):
      logbehind = log --format=format:'%C(bold blue)%h%C(reset) - %C(bold green)(%ar)%C(reset) %C(white)%s%C(reset) %C(dim white)- %an%C(reset)' HEAD..@{u}
      diffbehind = diff HEAD..@{u}

      lol = log --graph --decorate --pretty=oneline --abbrev-commit
      lola = log --graph --decorate --pretty=oneline --abbrev-commit --all

      # Add config to bring in github pull requests
      # See: https://gist.github.com/piscisaureus/3342247
      pullify = config --add remote.origin.fetch '+refs/pull/*/head:refs/remotes/origin/pr/*'

      # More git graph options 
      lg1 = log --graph --abbrev-commit --decorate --date=relative --format=format:'%C(bold blue)%h%C(reset) - %C(bold green)(%ar)%C(reset) %C(white)%s%C(reset) %C(dim white)- %an%C(reset)%C(bold yellow)%d%C(reset)' --all
      lg2 = log --graph --abbrev-commit --decorate --format=format:'%C(bold blue)%h%C(reset) - %C(bold cyan)%aD%C(reset) %C(bold green)(%ar)%C(reset)%C(bold yellow)%d%C(reset)%n''          %C(white)%s%C(reset) %C(dim white)- %an%C(reset)' --all
      lg = !"git lg1"

[apply]
	# Detect whitespace errors when applying a patch
	whitespace = warn

[core]
	# Use custom `.gitignore` and `.gitattributes`
	excludesfile = ~/.gitignore
	attributesfile = ~/.gitattributes
	# Treat spaces before tabs, lines that are indented with 8 or more spaces, and all kinds of trailing whitespace as an error
	whitespace = space-before-tab,indent-with-non-tab,trailing-space
  autocrlf = input
  precomposeunicode = true

[color]
	# Use colors in Git commands that are capable of colored output when outputting to the terminal
	ui = auto
  interactive = auto
[color "branch"]
	current = yellow reverse
	local = yellow
	remote = green
[color "diff"]
	meta = yellow bold
	frag = magenta bold
	old = red bold
	new = green bold
[color "status"]
	added = yellow
	changed = green
	untracked = cyan

#Â merge tool configured in .gitconfig.local
#[merge]
#	# Include summaries of merged commits in newly created merge commit messages
#	log = true
#  tool = kdiff3

# Use `origin` as the default remote on the `master` branch in all cases
[branch "master"]
	remote = origin
	merge = refs/heads/master

# URL shorthands
[url "git@github.com:"]
	insteadOf = "gh:"
	pushInsteadOf = "github:"
	pushInsteadOf = "git://github.com/"
[url "git://github.com/"]
	insteadOf = "github:"
[url "git@gist.github.com:"]
	insteadOf = "gst:"
	pushInsteadOf = "gist:"
	pushInsteadOf = "git://gist.github.com/"
[url "git://gist.github.com/"]
	insteadOf = "gist:"

[push]
	default = simple

[filter "media"]
  required = true
  clean = git media clean %f
  smudge = git media smudge %f

[include]
  # username, creds, etc. in local file not kept in git
  path = /home/vagrant/contx/dev_tools/scripts/git/gitconfig

[user]
  email = dimitrios.belis@williamhill.com
  name = Dimitrios Belis

